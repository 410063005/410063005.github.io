<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 点点滴滴]]></title>
  <link href="http://www.sunmoonblog.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.sunmoonblog.com/"/>
  <updated>2015-05-21T17:43:42+08:00</updated>
  <id>http://www.sunmoonblog.com/</id>
  <author>
    <name><![CDATA[Sunmoon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VerfiyError浅析]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/18/android-verfiyerror/"/>
    <updated>2015-05-18T15:57:04+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/18/android-verfiyerror</id>
    <content type="html"><![CDATA[<h1>VerifyError是什么</h1>

<p><a href="http://developer.android.com/reference/java/lang/VerifyError.html">Android开发文档</a>中关于<code>VerifyError</code>是这么介绍的：</p>

<blockquote><p>Thrown when the VM notices that an attempt is made to load a class which does not pass the class verification phase.</p></blockquote>

<p>即，Java虚拟机进行类加载时该类无法通过类校验(class verification)。具体来讲</p>

<blockquote><p>这种错误表示JVM中的校验器检测到某个类，虽然格式正确，但内部存在不一致或有安全问题。<code>VerifyError</code>类继承自<code>LinkageError</code>类，后者用于表示一类错误情形：一个类(称为A)依赖于另外的类(称为B)，而类B发生了兼容性上的改变。此外，<code>LinkageError</code>类继承自<code>Error</code>类，<code>Error</code>用于表示应用不应捕获的严重问题。方法不应该在<code>throw</code>子句中声明这些错误，因为它们表示不应发生的异常情况。</p>

<p>JVM包含一个字节码校验器，用于字节码执行前的验证，以保证字节码序列的完整性。验证过程通常包括以下检查：</p>

<ul>
<li>Branches point to valid locations (跳转分支有效? ) - 类加载时发生</li>
<li>数据被初始化，引用类型安全 - 类加载时发生</li>
<li>对私有方法或数据的访问受到控制 - 动态进行, 方法或数据首次被访问时发生</li>
</ul>
</blockquote>

<h1>VerifyError何时发生</h1>

<p>工程师实际开发中通常很难碰到<code>VerifyError</code>，而用户使用App时出现的Crash中确实有少量<code>VerifyError</code>。那么<code>VerifyError</code>到底怎么发生的呢。</p>

<p>有一种说法是，在<a href="http://stackoverflow.com/questions/8951666/getting-error-java-lang-verifyerror">低版本的机器上调用不支持的API会造成<code>VerifyError</code>问题</a>。在我的三星S5830(Android 2.3.6)上运行以下代码</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    System.out.println("before test");
    new Location("test").isFromMockProvider(); // Android 4.3中新加的API, 在Android 2.3.6什么后果
    System.out.println("after test");
}
</code></pre>

<p>的确崩溃了，但不是<code>VerifyError</code>，而是<code>NoSuchMethodError</code>。(不清楚不同机器上异常信息是否会有所不同)</p>

<p>下面找了一些<code>VerifyError</code>的例子。虽然这里的例子都比较简单，但对我们分析用户反馈中的<code>VerifyError</code>应该还是有所帮助的。</p>

<h2>例一</h2>

<p><a href="https://github.com/aectann/android-verify-error-example">例子来源</a></p>

<p>在Android手机(HTC One X, MUI-4.9.5, Android 4.4.4)上，这个例子的确会产生<code>VerifyError</code>。但在PC上(Java版本是1.6.0_13)，这个例子却能正常运行。这个例子不是很容易理解，有些疑惑。</p>

<h2>例二</h2>

<p><a href="https://github.com/aectann/android-verify-error-example">例子来源</a></p>

<p>相于前一个例子，这个容易理解多了，简单来说就是&#8221;将可继承的父类修改为不可继承，而子类保持不变&#8221;。步骤概括如下：</p>

<ol>
<li>定义<code>TestClassA</code>和<code>TestClassB</code>两个类</li>
<li><code>javac</code>分别将它们编译成class文件</li>
<li>修改<code>TestClassA</code>类，将其修改为<code>final</code>(不可继承的类)</li>
<li>重新编译<code>TestClassA</code>为class文件 (<code>TestClassB</code>仍是之前的class文件)</li>
<li><code>java</code>运行<code>TestClassB</code></li>
</ol>


<p>错误日志如下</p>

<p><code>java.lang.VerifyError: Cannot inherit from final class</code></p>

<p>除了继承<code>final</code>类会产生<code>VerifyError</code>，类似的办法还包括：</p>

<ol>
<li>子类覆盖父类中的<code>final</code>方法</li>
<li>修改继承关系，引起方法参数类型错误。具体见<a href="http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-verifyerror-how-to-solve-verifyerror/">这里</a></li>
</ol>


<h2>实际例子</h2>

<p>有个App使用定位SDK时出现<a href="http://crashes.to/s/0f287e83c35">如下crash</a></p>

<pre><code>java.lang.VerifyError: android/location/ILocationListener$Stub
       at android.location.LocationManager._requestLocationUpdates(LocationManager.java:683)
       at android.location.LocationManager.requestLocationUpdates(LocationManager.java:593)
       at ct.bt.a()
       at ct.bu.a()
</code></pre>

<p>crash的地方对应的代码如下</p>

<pre><code>    try {
        manager.requestLocationUpdates(
            LocationManager.GPS_PROVIDER,
            millis, 
            0.0f, 
            this, 
            handler.getLooper());
    } catch (Exception e) {
    }
</code></pre>

<p>不清楚错误原因，已有信息总结如下</p>

<ol>
<li>2015.5.11至2015.5.19，该问题共发生2例</li>
<li>机型分别是 HUAWEI G520(Android 4.1.1)和HUAWEI Y300(Android 4.1.2)</li>
</ol>


<p>错误日志表明, <code>ILocationListener$Stub</code>通不过检验，看对应的源码，问题大概来自 <code>LocationListener</code> 相关代码。</p>

<pre><code>    private void _requestLocationUpdates(String provider, Criteria criteria, long minTime,
            float minDistance, boolean singleShot, LocationListener listener, Looper looper) {
        if (minTime &lt; 0L) {
            minTime = 0L;
        }
        if (minDistance &lt; 0.0f) {
            minDistance = 0.0f;
        }

        try {
            synchronized (mListeners) {
                ListenerTransport transport = mListeners.get(listener);
                if (transport == null) {
                    transport = new ListenerTransport(listener, looper);
                }
                mListeners.put(listener, transport);
                mService.requestLocationUpdates(provider, criteria, minTime, minDistance,
                        singleShot, transport, mContext.getPackageName());
            }
        } catch (RemoteException ex) {
            Log.e(TAG, "requestLocationUpdates: DeadObjectException", ex);
        }
    }
</code></pre>

<p>这里并没有直接出现<code>ILocationListener$Stub</code>，唯一跟 <code>ILocationListener$Stub</code>有关的是<code>ListenerTransport</code>。<code>ListenerTransport</code>继承自<code>ILocationListener.Stub</code>，<code>ILocationListener</code>及<code>ILocationListener.Stub</code>由<code>ILocationListener.aidl</code>生成。</p>

<p><code>ILocationListener$Stub</code>是编译ROM时就已生成的类，正常来说不可能发生任何改变，也就不应该出现&#8221;版本兼容性&#8221;问题。但如果用户升级ROM出错或刷机呢？<font color="red">理解有限，无法评估了。</font></p>

<p><font color="red">系统代码为什么会出现VerifyError呢?</font></p>

<h1>VerifyError怎么处理</h1>

<p>了解<code>VerifyError</code>发生的原因之后，就不难知道避免<code>VerifyError</code>的办法很简单，那就是使用相同版本的JDK编译全部的类。另外，一旦某个类发生改变，应确保重新编译整个项目。最后，如果应用使用了外部的库，确认版本是正确的。</p>

<p>上面提到的处理方法的前提是我们可以控制源码，而Android平台上多数情况下我们是没有这种能力的，只能尽量保证API版本正确。</p>

<h1>参考资料</h1>

<p><a href="http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-verifyerror-how-to-solve-verifyerror/docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10">JVM Specification: Chapter 4.10. Verification of class Files.</a></p>

<p><a href="http://www.oracle.com/technetwork/java/security-136118.html">The Byte Code Verification Process.</a></p>
]]></content>
  </entry>
  
</feed>
