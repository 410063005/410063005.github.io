<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | 点点滴滴]]></title>
  <link href="http://www.sunmoonblog.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://www.sunmoonblog.com/"/>
  <updated>2015-05-27T17:47:24+08:00</updated>
  <id>http://www.sunmoonblog.com/</id>
  <author>
    <name><![CDATA[Sunmoon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle学习笔记]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/21/gradle-tutorial/"/>
    <updated>2015-05-21T12:10:51+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/21/gradle-tutorial</id>
    <content type="html"><![CDATA[<h1>Gradle简介</h1>

<h2>Projects和tasks</h2>

<p>Gradle中一切都由两个基本概念构成：<code>projects</code>和<code>tasks</code>。</p>

<p>projects - 每个Gradle构建由一个或多个<code>projects</code>组成。一个<code>project</code>代表软件中可被构建的某种组件。比如，可以是一个JAR包或Web应用。
tasks - 每个<code>project</code>由一个或多个<code>tasks</code>组成。一个<code>task</code>代表构建过程中的某些原子操作。比如，可以是编译某些类，创建一个JAR文件，生成文档，或者是将某些归档文件发布到代码库。</p>

<h2>Hello world</h2>

<p>使用<code>gradle</code>命令执行Gradle构建。<code>gradle</code>命令在当前目录中搜索<code>build.gradle</code>文件。这个<code>build.gradle</code>文件称为构建脚本。严格来说是构建配置脚本。构建脚本定义了<code>project</code>和它的<code>tasks</code>。</p>

<p>最简单的构建脚本如下：</p>

<pre><code>task hello {
    doLast {
        println 'Hello world!'
    }
}
</code></pre>

<p>这个构建脚本定义了一个名为<code>hello</code>的<code>task</code>。运行<code>gradle hello</code>时Gradle会执行<code>hello</code>任务。该任务简单地执行一行Groovy代码。</p>

<p>Gradle中的<code>tasks</code>跟Ant中的targets类似，但更强大更具表现力。<code>tasks</code>之间可以有依赖。</p>

<pre><code>task hello {
    doLast {
        println 'Hello world!'
    }
}

task intro(dependsOn: hello) &lt;&lt; {
    println "I'm cm"
}
</code></pre>

<p>被依赖的<code>task</code>不需要事先定义。</p>

<pre><code>task intro(dependsOn: 'hello') &lt;&lt; {
    println "I'm cm"
}

task hello {
    doLast {
        println 'Hello world!'
    }
}
</code></pre>

<p>Gradle中允许定义一个或多个缺省的tasks。</p>

<h1>Gradle编译Java项目</h1>

<p>Gradle是通用的构建工具。但是如果不编写相应的代码，Gradle无法真正用于构建。下面看看怎么用Gradle构建Java项目。多数Java项目构建过程基本类似：编译Java源文件，运行单元测试，将class文件打包成JAR文件。你不必重头为每个Java项目编写Gradle构建脚本，Gradle已有专门的<code>plugins</code>用于Java项目构建。</p>

<blockquote><p>A plugin is an extension to Gradle which configures your project in some way, typically by adding some pre-configured tasks which together do something useful.</p></blockquote>

<h2>Java Plugin</h2>

<p>要使用Java Plugin，只需要在构建脚本中添加如下代码(简单吧:))：</p>

<pre><code>apply plugin 'java'
</code></pre>

<p>使用Java Plugin应注意：</p>

<ol>
<li>源码位于<code>src/main/java</code>目录</li>
<li>测试代码位于<code>src/test/java</code>目录</li>
<li><code>src/main/resources</code>目录下的文件作为资源打包到JAR文件</li>
<li><code>src/test/resources</code>目录下的文件添加到classpath用于运行单元测试</li>
<li>构建结果输出到<code>build</code>目录，JAR文件输出到<code>build/libs</code>目录</li>
</ol>


<p>Java Plugin常用task包括：</p>

<ol>
<li><code>build</code> - 完整构建，编译并单元测试，生成JAR文件</li>
<li><code>clean</code> - 删除<code>build</code>目录，删除所有编译生成的文件</li>
<li><code>check</code> - 编译并单元测试</li>
</ol>


<h2>外部依赖</h2>

<p>Java项目通常依赖外部JAR文件。应告诉Gradle从哪里能找到项目中引用的JAR文件。这些JAR文件位于<code>repository</code>。<code>repository</code>用于下载项目依赖的JAR。通常使用公开的Maven仓库。</p>

<pre><code>repositories {
    mavenCentral()
}
</code></pre>

<p>按下面的方式添加项目依赖。这里声明production classes对<code>commons collections</code>有编译时依赖，而test classes对<code>junit</code>有编译时依赖：</p>

<pre><code>dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
</code></pre>

<h2>创建Eclipse项目</h2>

<p>Gradle要求的目录结构跟Eclipse Java项目有所不同，如何用创建一个既可以用Gradle编译、又可以在Eclipse中开发的Java项目呢？很简单，只需要在构建脚本中添加Eclipse plugin即可。</p>

<pre><code>apply plugin: 'eclipse'
</code></pre>

<p>然后执行<code>gradle eclipse</code>命令生成Eclipse项目文件，生成后该项目就能通过Eclipse的&#8221;Import Existing Projects into Workspace&#8221;导入进来。导入成功后可使用Eclipse进行项目开发:)。</p>

<h1>依赖管理</h1>

<p>依赖由两部分构成，首先Gradle应知道编译和运行项目需要的依赖项，以找到它们。这些外来的输入文件称为项目的<code>dependencies</code>。另一方面，Gradle要编译并上传项目的构建结果。这些向外输出的文件称为项目的<code>publications</code>。</p>

<p>可能需要从远程的Maven库或Ivy库，本地目录下载依赖项，或者从其他项目编译产生依赖项。这个过程称为<code>dependency resolution</code>。有些依赖项本身也有依赖，它们称为<code>transitive dependency</code>。</p>

<p>使用<code>dependencies</code> 声明依赖，如下：</p>

<pre><code>dependencies {
    compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
}
</code></pre>

<p>Gradle依赖分为不同的<code>configurations</code>。Java Plugin定义了几类标准的configurations。常见的几种如下</p>

<ul>
<li>compile - 编译项目源码所需的依赖</li>
<li>runtime - 运行production classes所需的依赖。缺省情况下也包含compile time dependencies</li>
<li>testCompile - 编译项目测试代码所需的依赖。缺省情况下也包含production classes和compile time dependencies</li>
<li>testRuntime - 运行测试代码所需的依赖。缺省情况下，也包含上述三种依赖</li>
</ul>


<p>不同的plugins有不同的标准configurations。也可以定义自己的configurations。</p>

<p>依赖又分不同的情况，一种是<code>external dependency</code>。这种依赖是当前构建以外的某种文件，通常保存在某种仓库中，比如Maven中央库或本地目录。使用<code>group</code>，<code>name</code>和<code>version</code>属性来标识依赖。一种简写方式是<code>"group:name:version"</code>.</p>

<p>依赖配置也用于发布文件，这些文件称为<code>publication artifacts</code>。使用Java Plugin通常不用告诉Gradle发布什么文件，只需要指定<code>uploadArchives task</code>的发布路径。</p>

<p>发布地本地目录</p>

<pre><code>uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}
</code></pre>

<p>发布到Ivy库</p>

<pre><code>uploadArchives {
    repositories {
        ivy {
            credentials {
                username "username"
                password "pw"
            }
            url "http://repo.mycompany.com"
        }
    }
}
</code></pre>

<p>当运行<code>gradle uploadArchives</code>时Gradle将编译并上传JAR文件到<code>repositories</code>。</p>

<h1>常用Gradle命令</h1>

<ul>
<li><code>gradle &lt;task-name&gt;</code> - 执行指定的task</li>
<li><code>gradle &lt;task-a&gt; -x &lt;task-b&gt;</code> - 在忽略指定的task的情况下执行task</li>
<li>运行Gradle命令时不必指定task的全名，只需要提供可区分的缩写即可。比如使用<code>di</code>作为<code>dist</code>的缩写，或使用<code>aD</code>作为<code>assembleDebug</code>的缩写</li>
<li><code>gradle -b &lt;build-file&gt;</code> - 指定构建脚本</li>
<li><code>gradle -p &lt;dir&gt;</code> - 指定项目目录</li>
<li><code>gradle -q projects</code> - 输出项目信息</li>
<li><code>build.gradle</code>中添加<code>description = 'Your Description'</code> - 提供项目描述</li>
<li><code>gradle tasks</code> - 输出tasks信息</li>
<li><code>gradle tasks -all</code> - 输出项目中全部的tasks信息</li>
<li><code>gradle help --task &lt;someTask&gt;</code> - 输出指定task的详细信息</li>
<li><code>gradle dependencies app:dependencies</code> - 输出依赖信息</li>
<li><code>gradle properties</code> - 输出properties</li>
<li><code>gradle -q &lt;module&gt;:properties</code> - 输出指定module的properties</li>
<li><code>gradle --profile &lt;task&gt;</code> - 记录构建消耗的时间并输出到<code>build/reports/profile</code>目录。文件名以构建时间命名</li>
<li><code>gradle -m &lt;task&gt;</code> - 仅查询tasks执行情况而不真正构建</li>
<li><code>gradle --gui</code> - 启动Gradle的GUI界面</li>
</ul>


<h1>Gradle GUI</h1>

<p>Gradle提供一个简单易用的GUI界面。通过<code>gradle --gui</code>可以启动Gradle GUI。Gradle GUI主要分为Task Tree、Favorites、Command Line和Setup四个标签页</p>

<p>Task Tree以层级方式显示所有的projects和对应的tasks。双击可以执行相应的task。可以使用filter隐藏不常用的tasks，也可以将将常用的tasks添加到Favorites中。</p>

<p>Favorites用于显示常用的命令。可以非常复杂的命令，还能给它设置名字。比如，可以自定义一个构建命令用于快速编译以忽略单元测试、文档生成等步骤。</p>

<p>Command Line标签页用于直接运行单个的Gradle命令。只用输入&#8217;gradle&#8217;后的部分。可以在添加自定义命令前在这里进行尝试。</p>

<h1>Gradle插件</h1>

<p>Gradle自身提供的功能在实际的自动化过程中并不是非常有用。所有的实用功能，比如编译Java源码，是由<code>plugins</code>提供的。</p>

<p>一般会说<code>apply plugin</code>(使用插件)，对应的方法是<code>Project.apply()</code>。</p>

<pre><code>apply plugin: 'java'
</code></pre>

<p>Plugin有缩写名，比如使用&#8217;java&#8217;作为<code>JavaPlugin</code>的缩写名。也可以通过类型来使用插件，比如</p>

<pre><code>apply plugin: org.gradle.api.plugins.JavaPlugin
</code></pre>

<p>由于Gradle有缺省导入，所以也可写作</p>

<pre><code>apply plugin: JavaPlugin
</code></pre>

<p><code>plugin</code>的使用是幂等的(可以多次<code>apply</code>)。插件不过是实现了<code>Plugin</code>接口的类。</p>

<h1>疑难</h1>

<h2>代理上网问题</h2>

<p>在公司一般通过代理，Gradle没有设置正确的代理的话，很可能无法从repository下载依赖的JAR文件，提示构建失败。Gradle中可以使用标准的JVM系统属性来设置代理。可以直接在构建脚本中设置代理相关的属性，如<code>System.setProperty('http.proxyHost', 'www.somehost.org')</code>。也可以在项目根目录或Gradle主目录中的<code>gradle.properties</code>文件中指定这些属性。<code>gradle.properties</code>内容如下</p>

<pre><code>systemProp.http.proxyHost=www.somehost.org
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=userid
systemProp.http.proxyPassword=password
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost
</code></pre>

<h2>官方Maven库下载慢</h2>

<p>如果当前网络条件下从官方Maven库下载文件过慢，可以通过修改构建脚本切换到国内的Maven镜像仓库，或者换成自建的Maven私服。比如，切换成<a href="http://maven.oschina.net/index.html">开源中国的Maven库</a></p>

<pre><code>repositories {
    maven{ url 'http://maven.oschina.net/content/groups/public/'}
}
</code></pre>

<p>也可以在<code>gradle.properties</code>中添加<code>REPO_URL=&lt;url&gt;</code>，然后在<code>build.gradle</code>中使用<code>project.REPO_URL</code>引用这个url</p>

<h2>其他问题</h2>

<p>错误：<code>Connection to https://jcenter.bintray.com refused</code></p>

<p>原因：没有配置HTTPS代理，在<code>gradle.properties</code>上配置HTTPS代理即可</p>

<p>错误：<code>Could not create plugin of type 'AppPlugin'</code></p>

<p>原因：Gradle版本过低。使用独立安装的Gradle(v1.12)会出现这个问题，使用Android Studio自带的Gradle(v2.2.1)完全正常</p>

<p>错误：JDK编译失败</p>

<p>原因：Android Studio自带JDK 7编译，源码中使用了Java 7的语法。命令行中使用Gradle编译时使用JDK 6进行编译，所以报错。<code>gradle.properties</code>使用<code>org.gradle.java.home</code>属性指定Gradle编译时使用的JDK路径。<a href="https://docs.gradle.org/current/userguide/build_environment.html">官方文档</a></p>

<hr />

<p>参考资料：</p>

<ul>
<li>Gradle Userguide</li>
<li><a href="http://www.yrom.net/blog/2015/02/07/change-gradle-maven-repo-url/">Gradle 修改 Maven 仓库地址</a></li>
<li><a href="http://www.huangyunkun.com/2014/04/26/libgdx-gradle-change-source/">使用Gradle构建速度慢的问题</a></li>
</ul>


<p>To Read:</p>

<ul>
<li><a href="http://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/">Gradle Android插件用户指南</a></li>
<li><a href="http://sinojelly.sinaapp.com/2014/02/201402-gradle-use-notes/">201402 Gradle使用笔记</a></li>
<li><a href="http://rileybrewer.com/blog/2013/10/4/building-faster-with-gradle-in-android-studio">BUILDING FAST(ER) WITH GRADLE IN ANDROID STUDIO</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
