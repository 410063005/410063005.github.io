<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[点点滴滴]]></title>
  <link href="http://www.sunmoonblog.com/atom.xml" rel="self"/>
  <link href="http://www.sunmoonblog.com/"/>
  <updated>2015-05-27T10:33:04+08:00</updated>
  <id>http://www.sunmoonblog.com/</id>
  <author>
    <name><![CDATA[Sunmoon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle学习笔记]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/21/gradle-tutorial/"/>
    <updated>2015-05-21T12:10:51+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/21/gradle-tutorial</id>
    <content type="html"><![CDATA[<h1>Gradle简介</h1>

<h2>Projects和tasks</h2>

<p>Gradle中一切都由两个基本概念构成：<code>projects</code>和<code>tasks</code>。</p>

<p>projects - 每个Gradle构建由一个或多个<code>projects</code>组成。一个<code>project</code>代表软件中可被构建的某种组件。比如，可以是一个JAR包或Web应用。
tasks - 每个<code>project</code>由一个或多个<code>tasks</code>组成。一个<code>task</code>代表构建过程中的某些原子操作。比如，可以是编译某些类，创建一个JAR文件，生成文档，或者是将某些归档文件发布到代码库。</p>

<h2>Hello world</h2>

<p>使用<code>gradle</code>命令执行Gradle构建。<code>gradle</code>命令在当前目录中搜索<code>build.gradle</code>文件。这个<code>build.gradle</code>文件称为构建脚本。严格来说是构建配置脚本。构建脚本定义了<code>project</code>和它的<code>tasks</code>。</p>

<p>最简单的构建脚本如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>task hello {
</span><span class='line'>    doLast {
</span><span class='line'>        println 'Hello world!'
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这个构建脚本定义了一个名为<code>hello</code>的<code>task</code>。运行<code>gradle hello</code>时Gradle会执行<code>hello</code>任务。该任务简单地执行一行Groovy代码。</p>

<p>Gradle中的<code>tasks</code>跟Ant中的targets类似，但更强大更具表现力。<code>tasks</code>之间可以有依赖。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>task hello {
</span><span class='line'>    doLast {
</span><span class='line'>        println 'Hello world!'
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>task intro(dependsOn: hello) &lt;&lt; {
</span><span class='line'>    println "I'm cm"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>被依赖的<code>task</code>不需要事先定义。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>task intro(dependsOn: 'hello') &lt;&lt; {
</span><span class='line'>    println "I'm cm"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>task hello {
</span><span class='line'>    doLast {
</span><span class='line'>        println 'Hello world!'
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Gradle中允许定义一个或多个缺省的tasks。</p>

<h1>Gradle编译Java项目</h1>

<p>Gradle是通用的构建工具。但是如果不编写相应的代码，Gradle无法真正用于构建。下面看看怎么用Gradle构建Java项目。多数Java项目构建过程基本类似：编译Java源文件，运行单元测试，将class文件打包成JAR文件。你不必重头为每个Java项目编写Gradle构建脚本，Gradle已有专门的<code>plugins</code>用于Java项目构建。</p>

<blockquote><p>A plugin is an extension to Gradle which configures your project in some way, typically by adding some pre-configured tasks which together do something useful.</p></blockquote>

<h2>Java Plugin</h2>

<p>要使用Java Plugin，只需要在构建脚本中添加如下代码(简单吧:))：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin 'java'</span></code></pre></td></tr></table></div></figure>


<p>使用Java Plugin应注意：</p>

<ol>
<li>源码位于<code>src/main/java</code>目录</li>
<li>测试代码位于<code>src/test/java</code>目录</li>
<li><code>src/main/resources</code>目录下的文件作为资源打包到JAR文件</li>
<li><code>src/test/resources</code>目录下的文件添加到classpath用于运行单元测试</li>
<li>构建结果输出到<code>build</code>目录，JAR文件输出到<code>build/libs</code>目录</li>
</ol>


<p>Java Plugin常用task包括：</p>

<ol>
<li><code>build</code> - 完整构建，编译并单元测试，生成JAR文件</li>
<li><code>clean</code> - 删除<code>build</code>目录，删除所有编译生成的文件</li>
<li><code>check</code> - 编译并单元测试</li>
</ol>


<h2>外部依赖</h2>

<p>Java项目通常依赖外部JAR文件。应告诉Gradle从哪里能找到项目中引用的JAR文件。这些JAR文件位于<code>repository</code>。<code>repository</code>用于下载项目依赖的JAR。通常使用公开的Maven仓库。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>按下面的方式添加项目依赖。这里声明production classes对<code>commons collections</code>有编译时依赖，而test classes对<code>junit</code>有编译时依赖：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
</span><span class='line'>    testCompile group: 'junit', name: 'junit', version: '4.+'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>创建Eclipse项目</h2>

<p>Gradle要求的目录结构跟Eclipse Java项目有所不同，如何用创建一个既可以用Gradle编译、又可以在Eclipse中开发的Java项目呢？很简单，只需要在构建脚本中添加Eclipse plugin即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'eclipse'</span></code></pre></td></tr></table></div></figure>


<p>然后执行<code>gradle eclipse</code>命令生成Eclipse项目文件，生成后该项目就能通过Eclipse的&#8221;Import Existing Projects into Workspace&#8221;导入进来。导入成功后可使用Eclipse进行项目开发:)。</p>

<h1>依赖管理</h1>

<p>依赖由两部分构成，首先Gradle应知道编译和运行项目需要的依赖项，以找到它们。这些外来的输入文件称为项目的<code>dependencies</code>。另一方面，Gradle要编译并上传项目的构建结果。这些向外输出的文件称为项目的<code>publications</code>。</p>

<p>可能需要从远程的Maven库或Ivy库，本地目录下载依赖项，或者从其他项目编译产生依赖项。这个过程称为<code>dependency resolution</code>。有些依赖项本身也有依赖，它们称为<code>transitive dependency</code>。</p>

<p>使用<code>dependencies</code> 声明依赖，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>  compile group: 'org.hibernate', name: 'hibernate-core', version: '3.6.7.Final'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Gradle依赖分为不同的<code>configurations</code>。Java Plugin定义了几类标准的configurations。常见的几种如下</p>

<ul>
<li>compile - 编译项目源码所需的依赖</li>
<li>runtime - 运行production classes所需的依赖。缺省情况下也包含compile time dependencies</li>
<li>testCompile - 编译项目测试代码所需的依赖。缺省情况下也包含production classes和compile time dependencies</li>
<li>testRuntime - 运行测试代码所需的依赖。缺省情况下，也包含上述三种依赖</li>
</ul>


<p>不同的plugins有不同的标准configurations。也可以定义自己的configurations。</p>

<p>依赖又分不同的情况，一种是<code>external dependency</code>。这种依赖是当前构建以外的某种文件，通常保存在某种仓库中，比如Maven中央库或本地目录。使用<code>group</code>，<code>name</code>和<code>version</code>属性来标识依赖。一种简写方式是<code>"group:name:version"</code>.</p>

<p>依赖配置也用于发布文件，这些文件称为<code>publication artifacts</code>。使用Java Plugin通常不用告诉Gradle发布什么文件，只需要指定<code>uploadArchives task</code>的发布路径。</p>

<p>发布地本地目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uploadArchives {
</span><span class='line'>    repositories {
</span><span class='line'>        flatDir {
</span><span class='line'>            dirs 'repos'
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>发布到Ivy库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uploadArchives {
</span><span class='line'>    repositories {
</span><span class='line'>        ivy {
</span><span class='line'>            credentials {
</span><span class='line'>                username "username"
</span><span class='line'>                password "pw"
</span><span class='line'>            }
</span><span class='line'>            url "http://repo.mycompany.com"
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当运行<code>gradle uploadArchives</code>时Gradle将编译并上传JAR文件到<code>repositories</code>。</p>

<h1>常用Gradle命令</h1>

<ul>
<li><code>gradle &lt;task-name&gt;</code> - 执行指定的task</li>
<li><code>gradle &lt;task-a&gt; -x &lt;task-b&gt;</code> - 在忽略指定的task的情况下执行task</li>
<li>运行Gradle命令时不必指定task的全名，只需要提供可区分的缩写即可。比如使用<code>di</code>作为<code>dist</code>的缩写，或使用<code>aD</code>作为<code>assembleDebug</code>的缩写</li>
<li><code>gradle -b &lt;build-file&gt;</code> - 指定构建脚本</li>
<li><code>gradle -p &lt;dir&gt;</code> - 指定项目目录</li>
<li><code>gradle -q projects</code> - 输出项目信息</li>
<li><code>build.gradle</code>中添加<code>description = 'Your Description'</code> - 提供项目描述</li>
<li><code>gradle tasks</code> - 输出tasks信息</li>
<li><code>gradle tasks -all</code> - 输出项目中全部的tasks信息</li>
<li><code>gradle help --task &lt;someTask&gt;</code> - 输出指定task的详细信息</li>
<li><code>gradle dependencies app:dependencies</code> - 输出依赖信息</li>
<li><code>gradle properties</code> - 输出properties</li>
<li><code>gradle -q &lt;module&gt;:properties</code> - 输出指定module的properties</li>
<li><code>gradle --profile &lt;task&gt;</code> - 记录构建消耗的时间并输出到<code>build/reports/profile</code>目录。文件名以构建时间命名</li>
<li><code>gradle -m &lt;task&gt;</code> - 仅查询tasks执行情况而不真正构建</li>
<li><code>gradle --gui</code> - 启动Gradle的GUI界面</li>
</ul>


<h1>Gradle GUI</h1>

<p>Gradle提供一个简单易用的GUI界面。通过<code>gradle --gui</code>可以启动Gradle GUI。Gradle GUI主要分为Task Tree、Favorites、Command Line和Setup四个标签页</p>

<p>Task Tree以层级方式显示所有的projects和对应的tasks。双击可以执行相应的task。可以使用filter隐藏不常用的tasks，也可以将将常用的tasks添加到Favorites中。</p>

<p>Favorites用于显示常用的命令。可以非常复杂的命令，还能给它设置名字。比如，可以自定义一个构建命令用于快速编译以忽略单元测试、文档生成等步骤。</p>

<p>Command Line标签页用于直接运行单个的Gradle命令。只用输入&#8217;gradle&#8217;后的部分。可以在添加自定义命令前在这里进行尝试。</p>

<h1>Gradle插件</h1>

<p>Gradle自身提供的功能在实际的自动化过程中并不是非常有用。所有的实用功能，比如编译Java源码，是由<code>plugins</code>提供的。</p>

<p>一般会说<code>apply plugin</code>(使用插件)，对应的方法是<code>Project.apply()</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'java'</span></code></pre></td></tr></table></div></figure>


<p>Plugin有缩写名，比如使用&#8217;java&#8217;作为<code>JavaPlugin</code>的缩写名。也可以通过类型来使用插件，比如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: org.gradle.api.plugins.JavaPlugin</span></code></pre></td></tr></table></div></figure>


<p>由于Gradle有缺省导入，所以也可写作</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: JavaPlugin</span></code></pre></td></tr></table></div></figure>


<p><code>plugin</code>的使用是幂等的(可以多次<code>apply</code>)。插件不过是实现了<code>Plugin</code>接口的类。</p>

<h1>疑难</h1>

<h2>代理上网问题</h2>

<p>在公司一般通过代理，Gradle没有设置正确的代理的话，很可能无法从repository下载依赖的JAR文件，提示构建失败。Gradle中可以使用标准的JVM系统属性来设置代理。可以直接在构建脚本中设置代理相关的属性，如<code>System.setProperty('http.proxyHost', 'www.somehost.org')</code>。也可以在项目根目录或Gradle主目录中的<code>gradle.properties</code>文件中指定这些属性。<code>gradle.properties</code>内容如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemProp.http.proxyHost=www.somehost.org
</span><span class='line'>systemProp.http.proxyPort=8080
</span><span class='line'>systemProp.http.proxyUser=userid
</span><span class='line'>systemProp.http.proxyPassword=password
</span><span class='line'>systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost</span></code></pre></td></tr></table></div></figure>


<h2>官方Maven库下载慢</h2>

<p>如果当前网络条件下从官方Maven库下载文件过慢，可以通过修改构建脚本切换到国内的Maven镜像仓库，或者换成自建的Maven私服。比如，切换成<a href="http://maven.oschina.net/index.html">开源中国的Maven库</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>    maven{ url 'http://maven.oschina.net/content/groups/public/'}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>也可以在<code>gradle.properties</code>中添加<code>REPO_URL=&lt;url&gt;</code>，然后在<code>build.gradle</code>中使用<code>project.REPO_URL</code>引用这个url</p>

<h2>其他问题</h2>

<p>错误：<code>Connection to https://jcenter.bintray.com refused</code></p>

<p>原因：没有配置HTTPS代理，在<code>gradle.properties</code>上配置HTTPS代理即可</p>

<p>错误：<code>Could not create plugin of type 'AppPlugin'</code></p>

<p>原因：Gradle版本过低。使用独立安装的Gradle(v1.12)会出现这个问题，使用Android Studio自带的Gradle(v2.2.1)完全正常</p>

<p>错误：JDK编译失败</p>

<p>原因：Android Studio自带JDK 7编译，源码中使用了Java 7的语法。命令行中使用Gradle编译时使用JDK 6进行编译，所以报错。<code>gradle.properties</code>使用<code>org.gradle.java.home</code>属性指定Gradle编译时使用的JDK路径。<a href="https://docs.gradle.org/current/userguide/build_environment.html">官方文档</a></p>

<hr />

<p>参考资料：</p>

<ul>
<li>Gradle Userguide</li>
<li><a href="http://www.yrom.net/blog/2015/02/07/change-gradle-maven-repo-url/">Gradle 修改 Maven 仓库地址</a></li>
<li><a href="http://www.huangyunkun.com/2014/04/26/libgdx-gradle-change-source/">使用Gradle构建速度慢的问题</a></li>
</ul>


<p>To Read:</p>

<ul>
<li><a href="http://avatarqing.gitbooks.io/gradlepluginuserguidechineseverision/content/">Gradle Android插件用户指南</a></li>
<li><a href="http://sinojelly.sinaapp.com/2014/02/201402-gradle-use-notes/">201402 Gradle使用笔记</a></li>
<li><a href="http://rileybrewer.com/blog/2013/10/4/building-faster-with-gradle-in-android-studio">BUILDING FAST(ER) WITH GRADLE IN ANDROID STUDIO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AndroidTestCase中getApplicationContext()返回null]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/20/why-does-androidtestcase-dot-mcontext-dot-getapplication-return-null/"/>
    <updated>2015-05-20T14:33:09+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/20/why-does-androidtestcase-dot-mcontext-dot-getapplication-return-null</id>
    <content type="html"><![CDATA[<p>Android项目单元测试时发现下面代码会打印<code>null</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class TmpTest extends AndroidTestCase {
</span><span class='line'>
</span><span class='line'>  public void testGetApp() {
</span><span class='line'>      System.out.println(mContext.getApplicationContext());
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>找到<a href="http://stackoverflow.com/questions/6516441/why-does-androidtestcase-getcontext-getapplicationcontext-return-null">这篇帖子</a>，提出了如下非常有效的解决方案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class TmpTest extends AndroidTestCase {
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  public void setContext(Context context) {
</span><span class='line'>      super.setContext(context);
</span><span class='line'>      
</span><span class='line'>      while (null == context.getApplicationContext()) {
</span><span class='line'>                  SystemClock.sleep(16);
</span><span class='line'>              }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>问题来了：</p>

<ol>
<li>为什么会返回<code>null</code>呢，是否Android的bug？</li>
<li>为什么这个解决方案是有效的呢？它是什么原理？</li>
</ol>


<p>Android扩展了标准的JUnit测试框架，<code>AndroidTestCase</code>是利用<code>Instrumentation</code>来驱动Android相关的测试用例的。使用<code>Instrumentation</code>，可以在主程序启动之前，创建模拟的系统对象，如<code>Context</code>；控制应用组件的生命周期；发送UI事件给应用程序；在执行期间检查程序状态。</p>

<p>但是，<code>Instrumentation</code>在独立的线程中运行而非主线程，所以它可以在不阻塞或干扰主线程(反之也不会被主线程阻塞)的情况下执行。如果需要跟主线程同步，可以使用<a href="http://developer.android.com/reference/android/app/Instrumentation.html#waitForIdleSync%28%29">Instrumentation.waitForIdleSync()</a></p>

<p>而像<code>Application</code>或<code>Activity</code>等上层应用组件对象是由主线程初始化的。主线程初始化这些对象的同时，<code>Instrumentation</code>所在的线程也在运行。如果在<code>Instrumentation</code>线程中使用这些对象，而又没有线程安全地实现，肯定会出错。很不幸，<code>AndroidTestCase</code>的实现不是线程安全的(API 16 Jelly Bean之前)，可以认为是系统的bug。一种实现线程安全的办法是使用<a href="http://developer.android.com/reference/android/app/Instrumentation.html#runOnMainSync%28java.lang.Runnable%29">Instrumentation.runOnMainSync(java.lang.Runnable)</a>在主线程中运行相关代码。</p>

<p>当然，在<code>AndroidTestCase中</code>不能拿到<code>Instrumentation</code>实例，所以无论<code>Instrumentation.waitForIdleSync()</code>还是<code>Instrumentation.runOnMainSync()</code>都无法被调用。</p>

<p>总结一下，答案就是：</p>

<ol>
<li>该问题是Android的bug，问题根源在于<code>AndroidTestCase</code>不是线程安全的</li>
<li>这里的方案修复了<code>Instrumentation</code>线程和主线程的同步问题，可以保证线程安全</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VerfiyError浅析]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/18/android-verfiyerror/"/>
    <updated>2015-05-18T15:57:04+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/18/android-verfiyerror</id>
    <content type="html"><![CDATA[<h1>VerifyError是什么</h1>

<p><a href="http://developer.android.com/reference/java/lang/VerifyError.html">Android开发文档</a>中关于<code>VerifyError</code>是这么介绍的：</p>

<blockquote><p>Thrown when the VM notices that an attempt is made to load a class which does not pass the class verification phase.</p></blockquote>

<p>即，Java虚拟机进行类加载时该类无法通过类校验(class verification)。具体来讲</p>

<blockquote><p>这种错误表示JVM中的校验器检测到某个类，虽然格式正确，但内部存在不一致或有安全问题。<code>VerifyError</code>类继承自<code>LinkageError</code>类，后者用于表示一类错误情形：一个类(称为A)依赖于另外的类(称为B)，而类B发生了兼容性上的改变。此外，<code>LinkageError</code>类继承自<code>Error</code>类，<code>Error</code>用于表示应用不应捕获的严重问题。方法不应该在<code>throw</code>子句中声明这些错误，因为它们表示不应发生的异常情况。</p>

<p>JVM包含一个字节码校验器，用于字节码执行前的验证，以保证字节码序列的完整性。验证过程通常包括以下检查：</p>

<ul>
<li>Branches point to valid locations (跳转分支有效? ) - 类加载时发生</li>
<li>数据被初始化，引用类型安全 - 类加载时发生</li>
<li>对私有方法或数据的访问受到控制 - 动态进行, 方法或数据首次被访问时发生</li>
</ul>
</blockquote>

<h1>VerifyError何时发生</h1>

<p>工程师实际开发中通常很难碰到<code>VerifyError</code>，而用户使用App时出现的Crash中确实有少量<code>VerifyError</code>。那么<code>VerifyError</code>到底怎么发生的呢。</p>

<p>有一种说法是，在<a href="http://stackoverflow.com/questions/8951666/getting-error-java-lang-verifyerror">低版本的机器上调用不支持的API会造成<code>VerifyError</code>问题</a>。在我的三星S5830(Android 2.3.6)上运行以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>protected void onCreate(Bundle savedInstanceState) {
</span><span class='line'>  super.onCreate(savedInstanceState);
</span><span class='line'>  System.out.println("before test");
</span><span class='line'>  new Location("test").isFromMockProvider(); // Android 4.3中新加的API, 在Android 2.3.6什么后果
</span><span class='line'>  System.out.println("after test");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>的确崩溃了，但不是<code>VerifyError</code>，而是<code>NoSuchMethodError</code>。(不清楚不同机器上异常信息是否会有所不同)</p>

<p>下面找了一些<code>VerifyError</code>的例子。虽然这里的例子都比较简单，但对我们分析用户反馈中的<code>VerifyError</code>应该还是有所帮助的。</p>

<h2>例一</h2>

<p><a href="https://github.com/aectann/android-verify-error-example">例子来源</a></p>

<p>在Android手机(HTC One X, MUI-4.9.5, Android 4.4.4)上，这个例子的确会产生<code>VerifyError</code>。但在PC上(Java版本是1.6.0_13)，这个例子却能正常运行。这个例子不是很容易理解，有些疑惑。</p>

<h2>例二</h2>

<p><a href="https://github.com/aectann/android-verify-error-example">例子来源</a></p>

<p>相于前一个例子，这个容易理解多了，简单来说就是&#8221;将可继承的父类修改为不可继承，而子类保持不变&#8221;。步骤概括如下：</p>

<ol>
<li>定义<code>TestClassA</code>和<code>TestClassB</code>两个类</li>
<li><code>javac</code>分别将它们编译成class文件</li>
<li>修改<code>TestClassA</code>类，将其修改为<code>final</code>(不可继承的类)</li>
<li>重新编译<code>TestClassA</code>为class文件 (<code>TestClassB</code>仍是之前的class文件)</li>
<li><code>java</code>运行<code>TestClassB</code></li>
</ol>


<p>错误日志如下</p>

<p><code>java.lang.VerifyError: Cannot inherit from final class</code></p>

<p>除了继承<code>final</code>类会产生<code>VerifyError</code>，类似的办法还包括：</p>

<ol>
<li>子类覆盖父类中的<code>final</code>方法</li>
<li>修改继承关系，引起方法参数类型错误。具体见<a href="http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-verifyerror-how-to-solve-verifyerror/">这里</a></li>
</ol>


<h2>实际例子</h2>

<p>有个App使用定位SDK时出现<a href="http://crashes.to/s/0f287e83c35">如下crash</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.lang.VerifyError: android/location/ILocationListener$Stub
</span><span class='line'>       at android.location.LocationManager._requestLocationUpdates(LocationManager.java:683)
</span><span class='line'>       at android.location.LocationManager.requestLocationUpdates(LocationManager.java:593)
</span><span class='line'>       at ct.bt.a()
</span><span class='line'>       at ct.bu.a()</span></code></pre></td></tr></table></div></figure>


<p>crash的地方对应的代码如下</p>

<pre><code>    try {
        manager.requestLocationUpdates(
            LocationManager.GPS_PROVIDER,
            millis, 
            0.0f, 
            this, 
            handler.getLooper());
    } catch (Exception e) {
    }
</code></pre>

<p>不清楚错误原因，已有信息总结如下</p>

<ol>
<li>2015.5.11至2015.5.19，该问题共发生2例</li>
<li>机型分别是 HUAWEI G520(Android 4.1.1)和HUAWEI Y300(Android 4.1.2)</li>
</ol>


<p>错误日志表明, <code>ILocationListener$Stub</code>通不过检验，看对应的源码，问题大概来自 <code>LocationListener</code> 相关代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void _requestLocationUpdates(String provider, Criteria criteria, long minTime,
</span><span class='line'>        float minDistance, boolean singleShot, LocationListener listener, Looper looper) {
</span><span class='line'>    if (minTime &lt; 0L) {
</span><span class='line'>        minTime = 0L;
</span><span class='line'>    }
</span><span class='line'>    if (minDistance &lt; 0.0f) {
</span><span class='line'>        minDistance = 0.0f;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    try {
</span><span class='line'>        synchronized (mListeners) {
</span><span class='line'>            ListenerTransport transport = mListeners.get(listener);
</span><span class='line'>            if (transport == null) {
</span><span class='line'>                transport = new ListenerTransport(listener, looper);
</span><span class='line'>            }
</span><span class='line'>            mListeners.put(listener, transport);
</span><span class='line'>            mService.requestLocationUpdates(provider, criteria, minTime, minDistance,
</span><span class='line'>                    singleShot, transport, mContext.getPackageName());
</span><span class='line'>        }
</span><span class='line'>    } catch (RemoteException ex) {
</span><span class='line'>        Log.e(TAG, "requestLocationUpdates: DeadObjectException", ex);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里并没有直接出现<code>ILocationListener$Stub</code>，唯一跟 <code>ILocationListener$Stub</code>有关的是<code>ListenerTransport</code>。<code>ListenerTransport</code>继承自<code>ILocationListener.Stub</code>，<code>ILocationListener</code>及<code>ILocationListener.Stub</code>由<code>ILocationListener.aidl</code>生成。</p>

<p><code>ILocationListener$Stub</code>是编译ROM时就已生成的类，正常来说不可能发生任何改变，也就不应该出现&#8221;版本兼容性&#8221;问题。但如果用户升级ROM出错或刷机呢？<font color="red">理解有限，无法评估了。</font></p>

<p><font color="red">系统代码为什么会出现VerifyError呢?</font></p>

<h1>VerifyError怎么处理</h1>

<p>了解<code>VerifyError</code>发生的原因之后，就不难知道避免<code>VerifyError</code>的办法很简单，那就是使用相同版本的JDK编译全部的类。另外，一旦某个类发生改变，应确保重新编译整个项目。最后，如果应用使用了外部的库，确认版本是正确的。</p>

<p>上面提到的处理方法的前提是我们可以控制源码，而Android平台上多数情况下我们是没有这种能力的，只能尽量保证API版本正确。</p>

<h1>参考资料</h1>

<p><a href="http://examples.javacodegeeks.com/java-basics/exceptions/java-lang-verifyerror-how-to-solve-verifyerror/docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10">JVM Specification: Chapter 4.10. Verification of class Files.</a></p>

<p><a href="http://www.oracle.com/technetwork/java/security-136118.html">The Byte Code Verification Process.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octpress写博客]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/14/write-blog-using-octpress/"/>
    <updated>2015-05-14T15:12:48+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/14/write-blog-using-octpress</id>
    <content type="html"><![CDATA[<p>今天试用Octpress，感觉非常不错。安装试用过程记录如下。操作非常简单，基本是按照帮助文档一路 Next，所以这里只记录遇到的问题以及跟帮助文档不符的地方(也许文档过期了)</p>

<h1>1. 安装</h1>

<p>分别要安装 Git，Ruby，DevKit，Python，最后才是 Octpress。</p>

<h2>1.1 版本问题</h2>

<p>安装Ruby和DevKit容易出错，主要问题是版本不对。为减少版本出错可能，还是从<a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>下载Ruby和DevKit吧。一定要注意版本对应关系：操作系统是否64位、支持哪个版本的Ruby。</p>

<h2>1.2 代理问题</h2>

<p>公司上网要走代理，<code>gem</code> 也需要设置相应的代理，设置方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set http-proxy=&lt;http proxy&gt;</span></code></pre></td></tr></table></div></figure>


<h2>1.3 HTTPS问题</h2>

<p>可能遇到无法从 <code>https://rubygems.org/</code> 下载安装的问题。更新源的方式如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources -r https://rubygems.org/
</span><span class='line'>gem sources -a http://rubygems.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<p>也可以尝试国内的淘宝镜像 <code>http://ruby.taobao.org/</code>，速度可能快点。</p>

<h1>2. 使用</h1>

<p>主要命令如下：</p>

<ul>
<li><code>rake preview</code> - 通过 <code>http://localhost:4000/</code> 进行预览</li>
<li><code>rake new_post['my blog']</code> - 添加文章</li>
<li><code>rake generate</code> - 生成文章。每次执行了添加博客的命令，或是修改了现有博客的内容后都应执行这个命令</li>
<li><code>rake watch</code> - 检测文件变化,实时生成新内容</li>
<li><code>rake deploy</code> - 将本地的内容发布到Github上</li>
</ul>


<p>如果将本地内容发布到Github，可以参考<a href="http://octopress.org/docs/deploying/github/">这里</a></p>

<p><strong>不要忘记</strong> 将源码提交</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h1>3. 参考资料</h1>

<ol>
<li><a href="http://www.open-open.com/lib/view/open1423539522764.html">Windows上安装Octopress博客</a></li>
<li><a href="http://www.cnblogs.com/oec2003/archive/2013/05/27/3100896.html">Windows下搭建Octopress博客</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Octopress Blog]]></title>
    <link href="http://www.sunmoonblog.com/blog/2015/05/14/my-first-octopress-blog/"/>
    <updated>2015-05-14T11:55:39+08:00</updated>
    <id>http://www.sunmoonblog.com/blog/2015/05/14/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<h1>中文标题1</h1>

<h1>中文标题2</h1>
]]></content>
  </entry>
  
</feed>
